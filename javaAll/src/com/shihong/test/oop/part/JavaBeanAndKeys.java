package com.shihong.test.oop.part;

/**
 * @author shihong on 2020/8/28.
 * JavaBean和关键字
 */
public class JavaBeanAndKeys {
	/*
		JaveBean是java语言编写的可重用组件

		所谓的JavaBean是指符合如下标准的java类
			类是公共的
			有一个无参的公共构造器
			有属性且有对应的set,get方法

			用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用
			Java代码创造的对象进行打包，并且其他的开发者可以通过内部的jsp页面、
			servlet、其他JavaBean、applet程序或者应用来使用这些对象用户可以
			认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变

		this:
			在方法内部使用，即这个方法所属对象的引用
			在构造器内部使用，表示该构造器正在初始化的对象
		this表示当前对象，可以调用类的属性、方法和构造器

		使用时机：
			当方法内部需要调用该方法的对象时使用
			1.当形参与成员变量重名时，如 果在方法内部需要使用成员变 量，必须添加this来表明该变量 是类成员
			2.在任意方法内，如果使用 当前类的成员变量或成员方法可 以在其前面添加this，增强程序 的阅读性

		注意：
			1.使用this()必须放在构造器的首行！
			2.使用this调用本类中其他的构造器，保证至少有一个构造器是不用this的。


		super: 与this使用类似表示调用父类的引用

		package:
			•	package语句作为Java源 文件的第一条语句，指明 该文件中定义的类所在的 包。(若缺省该语句，则 指定为无名包)。
			它的格 式为：
				• 包对应于文件系统的目录， package语句中，用 “.” 来指 明包(目录)的层次；
				• 包通常用小写单词，类名首 字母通常大写。

		Import:
			为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所 需要的类或全部类(.*)。import语句告诉编译器到哪里去寻找类。
			•	语法格式：
			import  包名[.子包名…]. <类名 |*>

			•	应用举例：
			import  p1.Test;   //import p1.*;表示引入p1包中的所有类
			public class TestPackage{
				public static void main(String args[]){
					Test t = new Test();	//Test类在p1包中定义
					t.display();
				}
			}

			a)	Import
			b)	当在类中要访问不同包的同名类时可以采用全类名访问的方式
				a.	如： 包名.类名  对象名 = new   类名();
				b.	不能使用导入多个包的方式
			c)	静态导入，jdk5.0后出现的新特性  可以直接导入包的时候到包的相应
			属性或方法，在使用时就可以不用再类名调用，直接写属性名或方法 名使用即可
				a.	语法： import static 全类名. 属性;或
			Import static 全类名.*;
			d)	系统默认导入     核心包：java.lang包，所以不用显式的导入，里面的
			类都能直接使用;


		JDK中主要的包介绍
		•	java.lang----包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能。
			2.	java.net----包含执行与网络相关的操作的类和接口。
			3.	java.io  ----包含能提供多种输入/输出功能的类。
			4.  java.util----包含一些实用工具类，如定义系统特性、接口的集合框架类、
				使用与日期日历相关的函数。
			5.	java.text----包含了一些java格式化相关的类
			6.	java.sql----包含了java进行JDBC数据库编程的相关类/接口
			7.	java.awt----包含了构成抽象窗口工具集（abstract window toolkits）的 多个类，
				这些类被用来构建和管理应用程序的图形用户界 面(GUI)。
			8.	java.applet----包含applet运行所需的一些类。

		垃圾回收
			相关的API
				a) System.ge();启动垃圾回收机制
				b)	Finalize(); 当对象被回收时，系统 自动调用此对象的此方法，一 般不用管，当需要清除更多的其他 资源 时，
				可以重写些方法做 清除工作;
			无用对象：当对象没有更多引用时，此对象就变成 了无用对象，系统会通过 垃圾回收机制回收这些对象心全释放资源供其他对象使用
			对象一量变成，无用了，会马上被回收吗？
				不会，垃圾回收带有一定的不确定性：

		对象数组 /对象关联
			对象关联：
				对象的属性中包含另一个对象作为他的属性，这样的方式就叫对象的关联
			对象数组 ：
				创建对象数组 ，它中的值都是这个对象类型的不同对象




	 */
}
