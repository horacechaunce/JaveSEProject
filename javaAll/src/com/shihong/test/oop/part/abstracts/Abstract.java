package com.shihong.test.oop.part.abstracts;

/**
 * @author shihong on 2020/9/1.
 * 抽象类介绍
 */
public class Abstract {

	/*
			a)	abstract 修饰的类是抽象类
			b)	abstract 可以修饰类，方法
			c)	用abstract关键字来修饰一个类时，这个类叫做抽象类；
			d) 	用abstract来修饰一个方法时，该方法叫做抽象方法。
				抽象方法：只有方法的声明，没有方法的实现。以分号结束：
					abstract  int abstractMethod( int a );
			注： 含有抽象方法的类必须被声明为抽象类。



			不能用abstract修饰属性、私有方法、构造器、静态方法、final的方法。


			抽象类中可以包含的成员包括：
				a)	属性 b)  构造器 c)  具体方法 d)  抽象方法



			特点：
				1，抽象类不能被实例化
				2，子类（具体类）可继承抽象父类 ，实现抽象方法
				3，具体子类适用抽象父类的多态
				4，抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须重写父类的抽 象方法，并提供方法体。
				5，若没有重写全部的抽象方法，仍为抽象类。

			abstract修饰符不能与哪些修饰符共同？
				private ,  static , final

			抽象类与一般类的异同点：
				相同点：
					抽象类和一般类都是用来描述事物的，都在内部定义了成员
				不同点：
					1，一般类有足够的信息描述事物，抽象类描述事物的信息有可能不足
					2，一般类中不能定义抽象方法，只能定义非抽象方法，抽象类中可以两者都有
					3，一般类可以被实例化，抽象类不能被实例化


	 */
}
